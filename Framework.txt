Phase# 1  Goal: Learning Framework Tech Tool Individually.

Technologies:

1. TestNG
	- Unit Testing Framework
	
2. Data Driven Testing
	- Best Practice to drive data from external resources
	
3. Maven
	- Build Maven Tool
	
4. Jenkins
	- Continuous Integration
	
5. Reports
	- Reports for Framework Tests
	
6. Log.4j
	- Logging framework generates Logs
	
7. Page Object Mechanism
	- Design Patterns for tests development
	
TESTNG:
	> We can have control over the test cases.

Testng.org
Create a java prject and then create a pkg which holds all the java classes.
We can intall plugins related to eclipse from help/eclispe marketplace
	> Intalll TestNG
	> Accept every thing.
> TestNG can act as Java Compiler as it do not has main method
1. To execute the program we have to create a method inside that method we will write our code that will be executed.
	> Before the method we have to annotate it as @Test so that the next thing coming after that anotation will be a test.
2. We can define multiple test cases in single class.
3. To create a xml file we have to convert the project into TestNG one.

4. Test Suite > Test Folder(Module) > Test Cases.
	Test Suite: Test suite is a container that has a set of tests
	Test Suite can have multiple modules, Test Folder can have mutiple test classes

> We can create multiple modules to uniquely identify which module contain which kind of cases like Login Test Cases, HomePage Test Cases
	> we can also prioritize the module to run only that module.
		> Suppose the client says run only Login Test Cases.
	> We can also give order to run particular cases in a class 
	
5. We can run the test suite and all the test cases inside that suite will be executed.


Include and Exclude Methods
6. Annotation:
	> @BeforeTest
		> If this annotation is define before any testMethod then suppose there are 30 class that will run and in 1 folder then it will see 
		if there is BeforeTest annotation if it is present then before running any case this case will run.
		
	> @AfterTest
		> If this annotation is define before any testMethod then suppose there are 30 class that will run and in 1 folder then it will see 
		if there is AfterTest annotation if it is present then if=t will run this case after all cases.
	> @BeforeTest and @AfterTest scope is a Test Folder only.	

> @BeforeSuite and @AfterSuite	
	> @BeforeSuite means this case will run at first in the suite before any cases.
	> @AfterSuite means this case will run at last in the suite before any cases.

> @BeforeMethod & @AfterMethod its scope is a particular class
	> @BeforeMethod	
		> Suppose a class has 4 test methods and 1 @BeforeMethod then before executing any Test Method it will execute 1 @BeforeMethod
		> We can use it to delete the cookies and caches before any case
	> @AfterMethod	
		> Suppose a class has 4 test methods and 1 @AfterMethod then after executing any Test Method it will execute 1 @AfterMethod
		> We can use it to delete the cookies and caches after any case

> @AfterClass and @BeforeClass
	> When entering any class and starts testing it will see any beforeclass annotation and execute this method first and afterclass annotation method will be executed after each case in the class is executed.
	> Its priority is greater then beforemethod and aftermethod

Folder Level:
@BeforeTest/@AfterTest

Suite Level:
@BeforeSuite/@AfterSuite

Class Level:
@BeforeMethod/@AfterMethod

Class Level: 
@BeforeClass/@AfterClass

> In TESTNG the test case are executed in Alphabetical Order

TESTNG HelperAttributes:

GROUPS:
@Test(groups = {"groupName"})
Suppose we have to run 4 cases only out of 400 cases after every build we can tag those case will same group name.
	<groups>
		<run>
			<include name="smoke"/>
		</run>
		</groups>
written after folder creation.

DependsOnMethods:
@Test(dependsOnMethods = {"WebOfficeLoan_3","WebOfficeLoan_4"})
public void WebOfficeLoan_2(){
}
if we write like this then before running "WebOfficeLoan_2" following methods should be executed "WebOfficeLoan_3" & "WebOfficeLoan_4"

enabled=false:
Suppose you know we have bug in the application and due to which this case will fail so we can give attribute to a case and selinium will skip its execution.

timeout = 4000:
Suppose you know this case will take too much time so that other cases will fail so we can give timeout time to tell the case wait before throughing error

How to drive data from xml file into test cases?
We have <parameter/> tag we can define it in xml file after suite so it can be used globally. Or we can define it after folder so it can be used in that folder classes only.
<parameter name="URL" value="qaacademy.com" / >

how to use it:

@Parameter("URL")
@Test
public void myMethod(String uname){
sop(uname);
}


@DataProvider
it is used to send multiple dataset to a test.
	@Test(dataProvider = "getData")
	public void PersonalLoan_4(String u, String p) {
		System.out.println("PL-4"); 
		System.out.println(u);
		System.out.println(p);

	}

@DataProvider
	public Object[][] getData() {
		Object[][] data = new Object[3][2];
		
		data[0][0] = "username1";
		data[0][1] = "password2";
		
		data[1][0] = "username2";
		data[1][1] = "password2";
		
		data[2][0] = "username3";
		data[2][1] = "password3";
		return data;	
		
	}
	
Listner:
Listners listens your test case.
It listen your test execution result. 
When it listen that some thing is fail it will invoke a particular method. But it won't stop. The testcase execution will be resumed.

create a new class which implements ITestListner. In testing.xml file we have to write after the suite
<listeners>
	<listener class-name="test.listenerTestNFG"/>
</listeners>

We can run test on parallel:
Just add parallel= "tests" thread-count ="2" in suite level